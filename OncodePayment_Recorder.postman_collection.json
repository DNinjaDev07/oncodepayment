{
	"info": {
		"_postman_id": "3977d562-24d5-4cee-a418-436e53f728d0",
		"name": "OncodePayment_Recorder",
		"description": "Test Java Spring API to records payments to H2 in-memory database",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "6236297"
	},
	"item": [
		{
			"name": "GetAllPayments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Loop through each object in the response array\r",
							"pm.response.json().forEach(function(transaction) {\r",
							"    \r",
							"    // // Check the size of each transaction object\r",
							"    // pm.test(\"Transaction object has 4 properties\", function () {\r",
							"    //     pm.expect(Object.keys(transaction).length).to.equal(4);\r",
							"    // });\r",
							"\r",
							"     // Check if id is not empty or null\r",
							"    pm.test(\"Transaction id is not empty or null\", function () {\r",
							"        pm.expect(transaction.id).to.not.be.oneOf([null, \"\"]);\r",
							"    });\r",
							"\r",
							"    // Check if amount is not empty or null\r",
							"    pm.test(\"Transaction amount is not empty or null\", function () {\r",
							"        pm.expect(transaction.amount).to.not.be.oneOf([null, \"\"]);\r",
							"    });\r",
							"\r",
							"    // Check if fromAccount is not empty or null\r",
							"    pm.test(\"Transaction fromAccount is not empty or null\", function () {\r",
							"        pm.expect(transaction.fromAccount).to.not.be.oneOf([null, \"\"]);\r",
							"    });\r",
							"\r",
							"    // Check if toAccount is not empty or null\r",
							"    pm.test(\"Transaction toAccount is not empty or null\", function () {\r",
							"        pm.expect(transaction.toAccount).to.not.be.oneOf([null, \"\"]);\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{payurl}}/getpayments",
					"host": [
						"{{payurl}}"
					],
					"path": [
						"getpayments"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetPaymentById",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"    pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"    var transaction = pm.response.json\r",
							"    // Check if id is not empty or null\r",
							"    pm.test(\"Transaction id is not empty or null\", function () {\r",
							"        pm.expect(transaction.id).to.not.be.oneOf([null, \"\"]);\r",
							"    });\r",
							"\r",
							"    // Check if amount is not empty or null\r",
							"    pm.test(\"Transaction amount is not empty or null\", function () {\r",
							"        pm.expect(transaction.amount).to.not.be.oneOf([null, \"\"]);\r",
							"    });\r",
							"\r",
							"    // Check if fromAccount is not empty or null\r",
							"    pm.test(\"Transaction fromAccount is not empty or null\", function () {\r",
							"        pm.expect(transaction.fromAccount).to.not.be.oneOf([null, \"\"]);\r",
							"    });\r",
							"\r",
							"    // Check if toAccount is not empty or null\r",
							"    pm.test(\"Transaction toAccount is not empty or null\", function () {\r",
							"        pm.expect(transaction.toAccount).to.not.be.oneOf([null, \"\"]);\r",
							"    });\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//Fetch payments\r",
							"const getPayments = {\r",
							"    url: pm.environment.get(\"payurl\") + \"/getpayments\",\r",
							"    method: 'GET',\r",
							"    header: 'Content-Type:application/json',\r",
							"};\r",
							"\r",
							"//Send request\r",
							"    pm.sendRequest(getPayments, function(err, res){\r",
							"    pm.expect(err).is.null;\r",
							"    // Parse the response JSON\r",
							"    const payments = res.json();\r",
							"\r",
							"    // Get a random index within the range of the array length\r",
							"    const randomIndex = Math.floor(Math.random() * payments.length);\r",
							"\r",
							"    // Set the paymentId variable to the id at the random index\r",
							"    pm.variables.set(\"paymentId\", payments[randomIndex].id);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{payurl}}/getpayment/{{paymentId}}",
					"host": [
						"{{payurl}}"
					],
					"path": [
						"getpayment",
						"{{paymentId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "AddPayment",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.set(\"amount\",_.random(50, 250));\r",
							"pm.variables.set(\"fromAccount\",_.random(100000000, 999999999));\r",
							"pm.variables.set(\"toAccount\", _.random(100000000, 999999999));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"    var transaction = pm.response.json();\r",
							"    // Check if id is not empty or null\r",
							"    pm.test(\"Transaction id is not empty or null\", function () {\r",
							"        pm.expect(transaction.id).to.not.be.oneOf([null, \"\"]);\r",
							"    });\r",
							"\r",
							"    // Request amount is equal to response amount\r",
							"    pm.test(\"Request amount is equal to response amount\", function () {\r",
							"        var reqAmount = (pm.variables.get(\"amount\"));\r",
							"        pm.expect((transaction.amount)).to.equal(reqAmount);\r",
							"    });\r",
							"\r",
							"    // Check if amount is not empty or null\r",
							"    pm.test(\"Transaction amount is not empty or null\", function () {\r",
							"        pm.expect(transaction.amount).to.not.be.oneOf([null, \"\"]);\r",
							"    });\r",
							"\r",
							"    // Check if fromAccount is not empty or null\r",
							"    pm.test(\"Transaction fromAccount is not empty or null\", function () {\r",
							"        pm.expect(transaction.fromAccount).to.not.be.oneOf([null, \"\"]);\r",
							"    });\r",
							"\r",
							"    // Check request fromAccount is equal to response fromAccount\r",
							"    pm.test(\"Check request fromAccount is equal to response fromAccount\", function () {\r",
							"        var reqfromAccount = pm.variables.get(\"fromAccount\");\r",
							"        pm.expect(transaction.fromAccount).to.equal(reqfromAccount);\r",
							"    });\r",
							"\r",
							"    // Check if toAccount is not empty or null\r",
							"    pm.test(\"Transaction toAccount is not empty or null\", function () {\r",
							"        pm.expect(transaction.toAccount).to.not.be.oneOf([null, \"\"]);\r",
							"    });\r",
							"\r",
							"    // Check request toAccount is equal to response toAccount\r",
							"    pm.test(\"Check request toAccount is equal to response toAccount\", function () {\r",
							"        var reqtoAccount = pm.variables.get(\"toAccount\");\r",
							"        pm.expect(transaction.toAccount).to.equal(reqtoAccount);\r",
							"    });"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"amount\": {{amount}},\r\n    \"fromAccount\": {{fromAccount}},\r\n    \"toAccount\": {{toAccount}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{payurl}}/addpayment",
					"host": [
						"{{payurl}}"
					],
					"path": [
						"addpayment"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdatePayment",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//Fetch payments\r",
							"const getPayments = {\r",
							"    url: pm.environment.get(\"payurl\") + \"/getpayments\",\r",
							"    method: 'GET',\r",
							"    header: 'Content-Type:application/json',\r",
							"};\r",
							"\r",
							"//Send request\r",
							"    pm.sendRequest(getPayments, function(err, res){\r",
							"    pm.expect(err).is.null;\r",
							"    // Parse the response JSON\r",
							"    const payments = res.json();\r",
							"\r",
							"    // Get a random index within the range of the array length\r",
							"    const randomIndex = Math.floor(Math.random() * payments.length);\r",
							"\r",
							"    // Set the paymentId variable to the id at the random index\r",
							"    pm.variables.set(\"paymentId\", payments[randomIndex].id);\r",
							"});\r",
							"\r",
							"//Set values to update\r",
							"pm.variables.set(\"amount\",_.random(50, 250));\r",
							"pm.variables.set(\"fromAccount\",_.random(100000000, 999999999));\r",
							"pm.variables.set(\"toAccount\", _.random(100000000, 999999999));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"    var transaction = pm.response.json();\r",
							"    // Check if id is not empty or null\r",
							"    pm.test(\"Transaction id is not empty or null\", function () {\r",
							"        pm.expect(transaction.id).to.not.be.oneOf([null, \"\"]);\r",
							"    });\r",
							"\r",
							"    // Request amount is equal to response amount\r",
							"    pm.test(\"Request amount is equal to response amount\", function () {\r",
							"        var reqAmount = (pm.variables.get(\"amount\"));\r",
							"        pm.expect((transaction.amount)).to.equal(reqAmount);\r",
							"    });\r",
							"\r",
							"    // Check if amount is not empty or null\r",
							"    pm.test(\"Transaction amount is not empty or null\", function () {\r",
							"        pm.expect(transaction.amount).to.not.be.oneOf([null, \"\"]);\r",
							"    });\r",
							"\r",
							"    // Check if fromAccount is not empty or null\r",
							"    pm.test(\"Transaction fromAccount is not empty or null\", function () {\r",
							"        pm.expect(transaction.fromAccount).to.not.be.oneOf([null, \"\"]);\r",
							"    });\r",
							"\r",
							"    // Check request fromAccount is equal to response fromAccount\r",
							"    pm.test(\"Check request fromAccount is equal to response fromAccount\", function () {\r",
							"        var reqfromAccount = pm.variables.get(\"fromAccount\");\r",
							"        pm.expect(transaction.fromAccount).to.equal(reqfromAccount);\r",
							"    });\r",
							"\r",
							"    // Check if toAccount is not empty or null\r",
							"    pm.test(\"Transaction toAccount is not empty or null\", function () {\r",
							"        pm.expect(transaction.toAccount).to.not.be.oneOf([null, \"\"]);\r",
							"    });\r",
							"\r",
							"    // Check request toAccount is equal to response toAccount\r",
							"    pm.test(\"Check request toAccount is equal to response toAccount\", function () {\r",
							"        var reqtoAccount = pm.variables.get(\"toAccount\");\r",
							"        pm.expect(transaction.toAccount).to.equal(reqtoAccount);\r",
							"    });"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"amount\": {{amount}},\r\n    \"fromAccount\": {{fromAccount}},\r\n    \"toAccount\": {{toAccount}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{payurl}}/updatepayment/{{paymentId}}",
					"host": [
						"{{payurl}}"
					],
					"path": [
						"updatepayment",
						"{{paymentId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeletePaymentById",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"//Send request\r",
							"    pm.sendRequest(pm.environment.get(\"payurl\") + \"/getpayment/\" + pm.variables.get(\"paymentId\"), function(err, res){\r",
							"    pm.expect(err).to.be.null;\r",
							"    pm.test('Test that payment record '+pm.variables.get(\"paymentId\") +' no longer exists', function(){\r",
							"        pm.expect(res.code).to.eql(404);\r",
							"    });\r",
							"    });"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//Fetch payments\r",
							"const getPayments = {\r",
							"    url: pm.environment.get(\"payurl\") + \"/getpayments\",\r",
							"    method: 'GET',\r",
							"    header: 'Content-Type:application/json',\r",
							"};\r",
							"\r",
							"//Send request\r",
							"    pm.sendRequest(getPayments, function(err, res){\r",
							"    pm.expect(err).is.null;\r",
							"    // Parse the response JSON\r",
							"    const payments = res.json();\r",
							"\r",
							"    // Get a random index within the range of the array length\r",
							"    const randomIndex = Math.floor(Math.random() * payments.length);\r",
							"\r",
							"    // Set the paymentId variable to the id at the random index\r",
							"    pm.variables.set(\"paymentId\", payments[randomIndex].id);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{payurl}}/deletepayment/{{paymentId}}",
					"host": [
						"{{payurl}}"
					],
					"path": [
						"deletepayment",
						"{{paymentId}}"
					]
				}
			},
			"response": []
		}
	]
}